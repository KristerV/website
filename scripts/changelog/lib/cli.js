import fs from "fs";
import fetch from "node-fetch";

import { getFormattedMonthBoundaries, getMonthName } from "./dates.js";
import { changelogPath } from "./config.js";
import { ensureGithubToken, replaceContentOfBlock } from "./utils.js";

export const helpMenu = () => {
  console.info(
    `Usage: node scripts/generate-changelog.js [--help] [--token=github-token] [--dryRun] [--onlyPrs] [<release-date>] [<from>] [<to>]`
  );
  console.info(
    `
      --help: Show this help text
      --token: GitHub token to use for the API calls. If not provided, the script will try to use the CHANGELOG_GITHUB_ACCESS_TOKEN environment variable
      --dryRun: Do not write the changelog file, just print the output to the console
      --onlyPrs: Only show the PRs section of the changelog. Only effective with --dryRun
      --force: Forcefully overwrite the changelog file, removing any manual changes to index.md
      `
  );
};

export const parseArgs = (argv) => {
  if (argv.help || argv.h) {
    helpMenu();
    process.exit(0);
  }

  const [firstBusinessDay, lastBusinessDay] = getFormattedMonthBoundaries();
  const releaseDate = argv._[0] || lastBusinessDay;
  const from = argv._[1] || firstBusinessDay;
  const to = argv._[2] || lastBusinessDay;
  const githubToken = ensureGithubToken();

  if (!githubToken) {
    process.exit(1);
  }

  return { releaseDate, from, to, githubToken };
};

export const sayHello = async (octokit) => {
  const {
    data: { login, name },
  } = await octokit.rest.users.getAuthenticated();
  console.info("Hello, %s\r\n", name || login);
};

export const outputResults = (
  releaseDate,
  perCategoryPrContent,
  options = { onlyPrs: false, force: false, dryRun: false }
) => {
  if (!fs.existsSync(`${changelogPath}/${releaseDate}`)) {
    fs.mkdirSync(`${changelogPath}/${releaseDate}`);
  }

  try {
    fs.copyFileSync(
      `${changelogPath}/_template.md`,
      `${changelogPath}/${releaseDate}/index.md`,
      !options.force && fs.constants.COPYFILE_EXCL // don't copy if file already exists, unless --force is passed
    );
  } catch {}
  let newChangelogFileContent = fs.readFileSync(
    `${changelogPath}/${releaseDate}/index.md`,
    "utf-8"
  );

  //todo(ft): get the data from the API
  const { codeCommit, codeVersion, jetbrainsVersion } = {
    codeCommit: "",
    codeVersion: "",
    jetbrainsVersion: "",
  };

  newChangelogFileContent = newChangelogFileContent.replace(
    /{{codeCommit}}/g,
    codeCommit
  );

  newChangelogFileContent = newChangelogFileContent.replace(
    /{{codeVersion}}/g,
    codeVersion
  );

  newChangelogFileContent = newChangelogFileContent.replace(
    /{{jetbrainsVersion}}/g,
    jetbrainsVersion
  );

  const releaseMonth = getMonthName(new Date(releaseDate).getUTCMonth() + 1);
  newChangelogFileContent = newChangelogFileContent.replace(
    /{{releaseMonth}}/g,
    releaseMonth
  );

  const releaseYear = new Date(releaseDate).getUTCFullYear();
  newChangelogFileContent = newChangelogFileContent.replace(
    /{{releaseYear}}/g,
    releaseYear
  );

  newChangelogFileContent = newChangelogFileContent.replace(
    /{{releaseDate}}/g,
    releaseDate
  );
  newChangelogFileContent = replaceContentOfBlock(
    "AUTOGENERATED_CHANGES",
    perCategoryPrContent,
    newChangelogFileContent
  );

  if (options.dryRun) {
    console.log("========================================");
    if (options.onlyPrs) {
      console.log(perCategoryPrContent);
      return newChangelogFileContent;
    }
    console.log(newChangelogFileContent);
    return newChangelogFileContent;
  }

  fs.writeFileSync(
    `${changelogPath}/${releaseDate}/index.md`,
    newChangelogFileContent
  );

  console.log(
    `Changelog generated. Please edit ${changelogPath}/${releaseDate}/index.md`
  );

  return newChangelogFileContent;
};

export const getDefaultThumbnailImage = async (month, releaseDate) => {
  const url = new URL(
    "https://og-playground-blue.vercel.app/api/gitpodchangelog"
  );
  url.searchParams.set("month", month);
  url.searchParams.set("date", releaseDate);

  const res = await fetch(url);
  return await res.buffer();
};
